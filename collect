#!/usr/bin/perl

$pi = 4 * atan2(1, 1);
$foot = .00000274;

$bucket = 100 * $foot;
# matching within 30 degrees means tight circles are hexagons
$angbucket = 30 * $pi / 180;

LINE:
while (<>) {
	next if (/--/);

	($when, $a, $to, $b, $date, $time, $sec, $dist, $speed) = split(/ /);

	if ($date ne $odate) {
		print STDERR "$date\n";
		$odate = $date;
	}

	next if ($dist < 10);

	($lat1, $lon1) = split(/,/, $a);
	($lat2, $lon2) = split(/,/, $b);

	$rat = cos(($lat1 + $lat2) / 2 * $pi / 180);
	$ang1 = atan2($lat2 - $lat1, ($lon2 - $lon1) * $rat);

	$a = int($lat1 / $bucket);
	$o = int($lon1 / $bucket);

	@candidates = ();

	for ($aa = $a - 1; $aa <= $a + 1; $aa++) {
		for ($oo = $o - 2; $oo <= $o + 2; $oo++) { # XXX is 2 enough?
			push @candidates, @{$means{$aa}{$oo}};
		}
	}

	$best = -1;
	$best_badness = 99999;

	for $c (@candidates) {
		$latd = $lat1 - $clat[$c];
		$lond = $lon1 - $clon[$c];
		$angd = $ang1 - $cang[$c];

		$dist = sqrt($latd * $latd + $rat * ($lond * $lond));

		# print "consider $lat1,$lon1 $ang1 to $clat[$c],$clon[$c] $cang[$c] $dist $angd\n";

		if ($dist < $bucket) {
			if (abs($angd) < $angbucket || abs($angd) > 2 * $pi - $angbucket) {
				$badness = ($dist / $bucket);

				if ($badness < $best_badness) {
					$best_badness = $badness;
					$best = $c;
				}
			}
		}
	}

	if ($best >= 0) {
		$c = $best;
		# print "matched $lat1,$lon1 $ang1 to $clat[$c],$clon[$c] $cang[$c]\n";

		$clat[$c] = ($clat[$c] * $count[$c] + $lat1) / ($count[$c] + 1);
		$clon[$c] = ($clon[$c] * $count[$c] + $lon1) / ($count[$c] + 1);

		$cx = $count[$c] * cos($cang[$c]) + cos($ang1);
		$cy = $count[$c] * sin($cang[$c]) + sin($ang1);
		$cang[$c] = atan2($cy, $cx);

		$count[$c]++;

		push @{$lats{$c}}, $lat1;
		push @{$lons{$c}}, $lon1;
		push @{$seqs{$c}}, ++$seq;
		push @{$whens{$c}}, "$date $time";

		next LINE;
	}

	$clat[$#clat + 1] = $lat1;
	$clon[$#clon + 1] = $lon1;
	$cang[$#cang + 1] = $ang1;
	$count[$#count + 1] = $count;

	# print "adding $lat1,$lon1 to $a $o\n";

	push @{$means{$a}{$o}}, $#count;

	push @{$lats{$#count}}, $lat1;
	push @{$lons{$#count}}, $lon1;
	push @{$seqs{$#count}}, ++$seq;
	push @{$whens{$#count}}, "$date $time";
}

for ($i = 0; $i <= $#clat; $i++) {
	@lats = @{$lats{$i}};
	@lons = @{$lons{$i}};
	@seqs = @{$seqs{$i}};
	@whens = @{$whens{$i}};

	$rat = cos($clat[$i] * $pi / 180);

	for ($j = 0; $j <= $#lats; $j++) {
		$latd = $lats[$j] - $clat[$i];
		$lond = ($lons[$j] - $clon[$i]) * $rat;

		$d = sqrt($latd * $latd + $lond * $lond);
		$a = atan2($latd, $lond);

		$a2 = $a - $cang[$i];
		$d2 = $d * cos($a2);

		printf("%d %s %.6f,%.6f\n",
			$seqs[$j],
			$whens[$j],
			$clat[$i] + sin($cang[$i]) * $d2,
			$clon[$i] + cos($cang[$i]) * $d2 / $rat);
	}
}

